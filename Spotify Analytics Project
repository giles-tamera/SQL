# For this project, I downloaded Spotify data from Kaggle.
# I then created a table to insert the Spotify data into.
# Finally, I performed analytics on the data using SQL.

# Table creation

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# Next, I imported the data from the .csv file I downloaded from Kaggle into this table.

# Finally, I explored the data using the following SQL queries.

# 1. What is the average danceability by artist and track? 

SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(danceability) ASC;

# 2. Who are the top 10 artists based on popularity? 

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

# 3. What artist released the longest song? 

SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

#OR

SELECT artist_name, track_name, MAX(duration_ms) 
FROM BIT_DB.Spotifydata;

# 4. What's the average danceability for the 10 most popular songs? 

SELECT artist_name, track_name, popularity, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC
LIMIT 10;

# 5. How many artists have 3 songs or more in the dataset?

SELECT artist_name, COUNT(track_name) AS song_count
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(track_name) >= 3
ORDER BY COUNT(track_name) DESC;

# 6. What are the top 5 most energetic songs?

SELECT artist_name, track_name, energy
FROM BIT_DB.Spotifydata
ORDER BY energy DESC
LIMIT 5;

# 7. List all the songs in this data that have featured artists.

SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%feat%'
ORDER BY artist_name ASC;

# 8. List all the songs in this data that do not have featured artists.

SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE track_name NOT LIKE '%feat%'
ORDER BY artist_name ASC;

# 9. What is the average popularity of a track in this database?

SELECT AVG(popularity)
FROM BIT_DB.Spotifydata;
